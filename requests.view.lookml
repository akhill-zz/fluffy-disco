- view: requests
## This persistent derived table flattens out the 'request' table generated by data pass back end events.
## Note, user_id is not passed consistently in the request data pass event, thus the gnarly CASE statement to pull user_id from the "user" and "user_id" fields, whichever passes it correctly. This may be an expensive operation and is certainly worth revisiting...
## Also, we normalize the derived table to look at the last row in the scratch_beta.request table given we send a lot of data for the same request ID with data repopulation efforts...
## View is organized by: core request dimensions, request customer facts, request funnel dimension, etc...

  derived_table:
    sql_trigger_value: SELECT DATE_PART('hour', GETDATE()) ## hourly
    sortkeys: [id, user_id]
    distkey: id

    sql: |
      SELECT
        *
        , RANK() OVER(PARTITION BY user_id ORDER BY created ASC) AS request_index

          FROM
    
          (SELECT
            DISTINCT request_id AS id
            , user_id
            , CASE
                WHEN request_id = 566886a9635a84e4147c1653 THEN '2015-12-09 19:53:00'  /*adjusts for a single giftlist request that never received a timestamp. note, in UTC owing to looker timezone conversion*/
                ELSE FIRST_VALUE(created::timestamp IGNORE NULLS) OVER (PARTITION BY id ORDER BY tstamp ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING) 
              END AS created
            , FIRST_VALUE(title IGNORE NULLS) OVER (PARTITION BY id ORDER BY tstamp ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING) AS first_title
            , LAST_VALUE(title IGNORE NULLS) OVER (PARTITION BY id ORDER BY tstamp ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING) AS current_title
            , FIRST_VALUE(description IGNORE NULLS) OVER (PARTITION BY id ORDER BY tstamp ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING) AS first_description
            , LAST_VALUE(description IGNORE NULLS) OVER (PARTITION BY id ORDER BY tstamp ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING) AS current_description
            , LAST_VALUE(modified::timestamp IGNORE NULLS) OVER (PARTITION BY id ORDER BY tstamp ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING) AS last_modified
            , LAST_VALUE(next_action_date::timestamp IGNORE NULLS) OVER (PARTITION BY id ORDER BY tstamp ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING) AS current_next_action_date
            , FIRST_VALUE(origin IGNORE NULLS) OVER (PARTITION BY id ORDER BY tstamp ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING) AS origin
            , FIRST_VALUE(persona_id IGNORE NULLS) OVER (PARTITION BY id ORDER BY tstamp ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING) AS first_persona_id
            , FIRST_VALUE(shopper_id IGNORE NULLS) OVER (PARTITION BY id ORDER BY tstamp ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING) AS first_shopper_id
            , LAST_VALUE(shopper_id IGNORE NULLS) OVER (PARTITION BY id ORDER BY tstamp ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING) AS current_shopper_id
            , INITCAP(LAST_VALUE(status IGNORE NULLS) OVER (PARTITION BY id ORDER BY tstamp ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING)) AS current_status
            , FIRST_VALUE(type IGNORE NULLS) OVER (PARTITION BY id ORDER BY tstamp ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING) AS category
            , INITCAP(LAST_VALUE(next_action IGNORE NULLS) OVER (PARTITION BY id ORDER BY tstamp ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING)) AS current_next_action
            , FIRST_VALUE(priority IGNORE NULLS) OVER (PARTITION BY id ORDER BY tstamp ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING) AS priority
            , INITCAP(LAST_VALUE(sort_options_user_customer_score IGNORE NULLS) OVER (PARTITION BY id ORDER BY tstamp ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING)) AS customer_score
            , LAST_VALUE(notes IGNORE NULLS) OVER (PARTITION BY id ORDER BY tstamp ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING) AS notes
            , FIRST_VALUE(ip_country_code IGNORE NULLS) OVER (PARTITION BY id ORDER BY tstamp ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING) AS ip_address_country_code
            , LAST_VALUE(COALESCE(experiment_id, experiment) IGNORE NULLS) OVER (PARTITION BY id ORDER BY tstamp ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING) AS experiment_id
            , LAST_VALUE(experiment_name IGNORE NULLS) OVER (PARTITION BY id ORDER BY tstamp ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING) AS experiment_name
            , LAST_VALUE(experiment_release IGNORE NULLS) OVER (PARTITION BY id ORDER BY tstamp ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING) AS experiment_release
            , LOWER(LAST_VALUE(experiment_result IGNORE NULLS) OVER (PARTITION BY id ORDER BY tstamp ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING)) AS experiment_result
            , ROW_NUMBER() OVER(PARTITION BY id ORDER BY tstamp DESC) AS request_event_index_desc
            , FIRST_VALUE(ip IGNORE NULLS) OVER (PARTITION BY id ORDER BY tstamp ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING) AS ip_address
    
          FROM
            public.t_request
            
          WHERE
            user_id NOT IN ('565613bc8419178d2bc5122f','5629b91f866fc7d6487ab4b4','5640edf3a44ffe12035ae2a6','5626553b13aab2d12cf4c7b0','562461cbd274fa4c0d14d92b','560fbfa44ac8cd7905a029ad','560eaf5e4ac8cd7905a028e2','55bc027db6c9a9457322b895','559abb739e73fa5631fdf0bc','55a3faf12620a21a0287bf29','559c83b14469543f1b534c3e','5581efab47319b4e70985261','559ac3cb4efd881c2a1de2a1','559c59c9c69c169d08f0dc1b','559e9a315a4668fb1108546e')
            AND request_id NOT IN ('570fcaf92bcea4513f631b92','570fcaf92bcea4513f631b89','570fcaf92bcea4513f631b93','570fcaf92bcea4513f631b8e','570fcaf92bcea4513f631b8f','570fcaf92bcea4513f631b8c','570fcaf92bcea4513f631b8d','570fcaf92bcea4513f631b90')
          )
          
          WHERE
            request_event_index_desc = 1

  fields:

# Dimensions #

  - dimension: id
    primary_key: true

  - dimension: user_id
    hidden:

  - dimension_group: created
    description: 'Request created timestamp'
    type: time
    timeframes: [time, date, week, month, quarter, hour_of_day, day_of_week]

  - dimension: first_title
    description: 'First title taken from first request chat item or collection item'

  - dimension: current_title
    description: 'Most recent title as updated by ShopOps'

  - dimension: first_description
    description: 'First description as taken from request chat item'

  - dimension: current_description
    description: 'Most recent description as updated by ShopOps'

  - dimension_group: last_modified
    description: 'Last time request was touched by either customer, shopper or scratchbot, i.e. the last time its status changed'
    type: time
    timeframes: [time, date, week, month, hour_of_day, day_of_week]

  - dimension_group: current_next_action_date
    description: 'For shoppers: what is the current next action date in shopper interface'
    type: time
    timeframes: [time, date, week, month, hour_of_day, day_of_week]

  - dimension: origin
    description: 'As categorized by our app'

  - dimension: category
    description: 'As categorized by our app'

  - dimension: source
    description: 'Origin transformed to correct for cases where collection requests not correctly identified. Inverted flow tracking origin tracking began on 3/2/16.'
    sql_case:
      giftlist: ${origin} = 'giftlist'
      collection: ${origin} = 'collection' OR ${category} IN ('DIRECT','PURCHASE') OR (${request_message_facts.number_of_automated_request_flow_messages} = 1 AND ${request_message_facts.first_automated_request_flow_message} LIKE '%the product you were interested in%')
      new request: ${origin} = 'new request'
      activation: ${origin} = 'activation'
      inverted flow: ${origin} = 'inverted flow'
      inverted flow in app: ${origin} = 'inverted flow in app'
      else: other

  - dimension: category_grouped
    description: 'gift, clothes, home, other, collection. Note: 420 (276 excluding customer exclusions) requests before 10/25 were marked GENERAL and are grouped as other'
    sql_case:
      collection: ${source} = 'collection'
      gift: ${category} = 'GIFT' OR LOWER(${first_title}) LIKE '%gift%' OR LOWER(${first_title}) LIKE '%present%' OR LOWER(${first_title}) LIKE '%birthday%' OR LOWER(${first_title}) LIKE '%anniversary%' OR LOWER(${first_title}) LIKE '%for my%' OR ${id} IN ('55d9b74072ed1387134c36a3','55d1d3f5b164cd1c58c70392','55bb751a8d77639b33b43166','55c2cb4c6f836669174e8c85','55b26f524a497cf131721793')
      clothes: ${category} = 'CLOTHES' OR ${id} IN ('564d78682133106808816f0d','564cd7d4239e6b7a2db2f727','5637f8b84d0b1d820316c62f','55f8a4c22dea0f087b313468','559aea529a5d6ee02fd82ba0','55c238ae3c4bedef4cefc545','55cdff7afed53b1211cd85d3','55a973d9774f8fd204608dee','55d613a74dcb481514152652','55c222d0b6c9a9457322b960','55bc22f7fdb6993677e4272d','55c4cb4d3c4bedef4cefc661','55c2328a72ed1387134c3477','55b2eee9c5d6e069438e5373','55afcdb5e796faf937908a0a','55ae80696e29752875011117','55b0e9f437a9bf293ea3d74b','55b0264da5e22b65408d9d1f','559c8b63f36e4a9010ddf477','55adb6b8fe16f8dc44607b0d','55a6bd35a6a68b6e76f8f3c5','55a177e0ff6d6b930116ac39','559c8c4d5a4668fb1108544b','559adc46b058991c31c49a5c')
      home: ${category} = 'HOME' OR ${id} IN ('559d2d04f36e4a9010ddf4aa','55f9f90633b87d031ce5d94d','55cb5bb672ed1387134c3563','55d494fbfed53b1211cd8673','55d2195672ed1387134c35e8','55d72a553c4bedef4cefc855','55d7c4b4b164cd1c58c70485','55c8d2643c4bedef4cefc6be','55d354dafed53b1211cd8649','55b2a4bcc5d6e069438e536d','55c3ba90fed53b1211cd84f1','55b1933a2e906a7441695d7d','55b8df1161e8dda84289cd5f','55afbd5f6e29752875011131','55b0fc9c7bacdcda3b8e51ac','55b0c2837310bb4942529727','55a91caf695e9cc23b658762','55a91af1695e9cc23b65875b','55a9243e3ae2813f39f6cae4','559e6925f36e4a9010ddf4bc','559ac566b058991c31c49a4e')
      else: 'other'

  - dimension: in_app_request_for_self_or_someone_else
    sql_case:
      self: ${source} = 'inverted flow in app' AND ${request_message_facts.first_automated_request_flow_message} = 'WHAT'
      someone else: ${source} = 'inverted flow in app' AND ${request_message_facts.first_automated_request_flow_message} = 'WHO'
      else: 'other'
  
  - dimension: reason_auto_recos_not_sent
    sql_case:
      has_auto_recos: ${has_auto_generated_recommendations} = 'yes'
      international: ${ip_address_country_code} != 'US'
      gift_for_self: ${source} = 'inverted flow in app' AND ${request_message_facts.first_automated_request_flow_message} = 'WHAT'
      insufficient_products: ${experiment_result} = 'search_not_enough_matches'
      excluded_occasion: ${occasion_grouped} in ('Wedding', 'Engagement', 'Baby Shower', 'Bridal Shower') or (lower(${request_message_facts.occasion}) like '%baptism%' or lower(${request_message_facts.occasion}) like '%bar mitz%' or lower(${request_message_facts.occasion}) like '%bat mitz%' or lower(${request_message_facts.occasion}) like '%christening%' or lower(${request_message_facts.occasion}) like '%confirmation%' or lower(${request_message_facts.occasion}) like '%first communion%' or lower(${request_message_facts.occasion}) like '%get well%' or lower(${request_message_facts.occasion}) like '%sympathy%' or lower(${request_message_facts.occasion}) like '%newborn%' or lower(${request_message_facts.occasion}) like '%new born%')
      young_age: ${request_message_facts.age} in ('1', '2', '3', '4', '5', '6', '7', '8', '9', '10', '11', '12', '13', '14') or (${request_message_facts.age} like '1-%' or ${request_message_facts.age} like '2-%' or ${request_message_facts.age} like '3-%' or ${request_message_facts.age} like '4-%' or ${request_message_facts.age} like '5-%' or ${request_message_facts.age} like '6-%' or ${request_message_facts.age} like '7-%' or ${request_message_facts.age} like '8-%' or ${request_message_facts.age} like '9-%' or ${request_message_facts.age} like '10-%' or ${request_message_facts.age} like '11-%' or ${request_message_facts.age} like '12-%' or ${request_message_facts.age} like '13-%' or ${request_message_facts.age} like '14-%' or lower(${request_message_facts.age}) like '%month%' or lower(${request_message_facts.age}) like '%teen%') 
      else: 'no_experiment'
  
  - dimension: request_created_after_012216_feedback_mechanism
    description: 'Yes is request created after feedback mechanism. No if before'
    type: yesno
    sql: ${created_date} > '2016-01-22'

  - dimension: first_persona_id
    description: 'Persona associated with first chat item customer saw'

  - dimension: first_shopper_id
    description: 'First shopper assigned to request'

  - dimension: current_shopper_id
    description: 'Last shopper assigned to request'

  - dimension: current_status
    description: 'Archived or Active, as set in Shopper Interface'

  - dimension: current_next_action
    description: 'None, Need_Info, Follow_up, Recos_Sent, Ditched, NULL, Needs_Review, Order, Shop as set in Shopper Interface'

  - dimension: priority
    description: 'As set in Shopper Interface'

  - dimension: customer_score
    description: 'As set in Shopper Interface'

  - dimension: notes
    description: 'As set in Shopper Interface'
    
  - dimension: curated_learning_test_condition
    description: 'Part of mom birthday or boyfriend test starting Apr 7' 
    sql_case: 
      Test: lower(${notes}) like '%banana%'
      Exception: lower(${notes}) like '%apple%'
      else: 'Blank'
    
  - dimension: request_index
    description: '1 = customers 1st request. 2 = 2nd request, etc...'
    type: number

  - dimension: request_index_tier
    description: '1 = customers 1st request. 2 = 2nd request, etc...'
    type: tier
    style: integer
    tiers: [1,2,3,5,10,12,15,20]
    sql: ${request_index}

  - dimension: occasion_grouped
    sql: ${request_message_facts.occasion_grouped}
  
  - dimension: for_whom_grouped
    sql: ${request_message_facts.for_whom_grouped}
  
  - dimension: for_whom_gender
    sql: ${request_message_facts.for_whom_gender}
  
  - dimension: budget
    sql: ${request_message_facts.budget}
  
  - dimension: request_link
    description: 'Link to request in shopper interface'
    sql: ${id}
    html: |
      <a href="https://si.helloshopper.com/request/{{value}}" " target="_blank">Shopper interface link</a>

  - dimension: message_stream
    description: 'Explore that summarizes all messages related to a request'
    sql: ${id}
    html: |
      <a href=messages?fields=requests.message_stream*&f[requests.id]={{value}}>Message Stream</a>

  - dimension: days_since_first_request
    hidden: true
    type: number
    sql: DATEDIFF(days, ${customer_request_facts.first_request_created_date}, ${created_date})
    
  - dimension: months_since_first_request
    type: number
    sql: CEILING(${days_since_first_request}/(30))

  - dimension: weeks_since_first_request
    type: number
    sql: CEILING(${days_since_first_request}/(7))

  - dimension: days_since_first_order
    hidden: true
    type: number
    sql: DATEDIFF(days, ${customer_request_facts.first_order_created_date}, ${created_date})
    
  - dimension: months_since_first_order
    type: number
    sql: CEILING(${days_since_first_order}/(30))

  - dimension: weeks_since_first_order
    type: number
    sql: CEILING(${days_since_first_order}/(7))
    
  - dimension: has_auto_generated_recommendations
    type: yesno
    sql: ${request_recommendation_facts.number_of_auto_generated_recommendations} > 0    
    
  - dimension: experiment_id
    description: 'Code-driven (i.e. recogen) experiment IDs'

  - dimension: experiment_name
    description: 'Version of experiment'
    sql: |
      CASE
        WHEN ${experiment_id} = '57116927050903484ab0335c' THEN 'mothers day v1'
        WHEN ${experiment_id} = '571fb7a8467a42a459070bce' THEN 'mothers day v2'
        WHEN ${experiment_id} = '57236dfb1f583c6861f60f68' THEN 'husbafriend v1'
        WHEN ${experiment_id} = '5728d8e5f7cba9dfab50b183' THEN 'husbafriend v2'
        WHEN ${experiment_id} = '572b89b45cc8452c1462bf47' THEN 'seemore'
        WHEN ${experiment_id} = '572ba8792ff16cf45aa0f6fc' THEN '15-plus'
        ELSE 'unknown'
      END

  - dimension: experiment_result
    description: 'Value representing whether/how experiment ran'
    type: string

  - dimension: has_archived_recommendations
    type: yesno
    sql: ${request_recommendation_facts.number_of_archived_recommendations} > 0

#----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

# Request customer facts #

  - dimension: minutes_to_request
    description: 'Minutes between account sign up and request'
    type: number
    sql: ROUND(DATEDIFF(seconds, ${customers.account_sign_up_time}::timestamp, ${created_time}::timestamp) / 60)
    value_format: '0.0'

  - dimension: repeat_customer_request
    description: 'Requests from a customer who has requested at least once on a previous day. Note: back-to-back requests from a customer on their first day will not get counted as repeat requests'
    type: yesno
    sql: DATEDIFF(days, ${customer_request_facts.first_request_created_time}::timestamp, ${created_time}::timestamp) > 0
  
  - dimension: repeat_purchaser_request
    description: 'Requests from a customer who has purchased at least once on a previous day. Note: back-to-back purchases from a customer on their first day will not get counted as repeat purchaser requests'
    type: yesno
    sql: DATEDIFF(days, ${customer_request_facts.first_order_created_time}::timestamp, ${created_time}::timestamp) > 0

  - dimension: request_session_is_signup_session
    description: 'Sign up session requests to try to tie requests explore request counts with requests count via sessions explore for new user activation'
    type: yesno
    sql: DATEDIFF(seconds, ${request_created_event_facts.request_created_session_start_time}::timestamp, ${customers.account_sign_up_time}::timestamp) > 0

  - dimension: ip_address_country_code
  
  - dimension: internal_ip_addresses
    type: yesno
    sql: ${TABLE}.ip_address IN ('96.89.239.217', '146.115.135.104', '174.63.120.5', '73.69.146.33', '66.30.112.58', '65.96.147.123', '108.15.29.191', '73.186.245.146', '65.96.65.176', '172.85.61.20', '80.4.63.186', '63.141.194.202', '50.137.111.172', '209.6.94.47', '209.6.197.82', '50.138.140.66', '65.27.187.73', '97.116.172.110')

  - dimension: has_saved_address_before_request_created
    type: yesno
    sql: DATEDIFF(seconds, ${customer_account_history.first_address_time}::timestamp, ${created_time}::timestamp) > 0

  - dimension: has_saved_credit_card_before_request_created
    type: yesno
    sql: DATEDIFF(seconds, ${customer_account_history.first_credit_card_time}::timestamp, ${created_time}::timestamp) > 0

#---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

# Aggregate measures #

  - measure: count
    type: count
    drill_fields: detail*
    
  - measure: count_with_instant_recos
    type: count
    filter:
      has_auto_generated_recommendations: yes
    drill_fields: detail*

  - measure: percent_with_instant_recos
    type: number
    sql: 100.0 * ${count_with_instant_recos} / NULLIF(${count}, 0)
    value_format: '0.0\%'

  - measure: percent_of_total
    type: percent_of_total
    sql: ${count}
  
  - measure: count_customers
    type: count_distinct
    sql: ${user_id}
    drill_fields: customer_detail*

  - measure: avg_request_auto_chat_reply_length
    description: 'Average character length of all customer replies to auto request chat questions. Counts spaces as characters. NOTE: excludes requests on collections'
    type: avg
    filter:
      source: -collection
    sql: ${request_message_facts.customer_request_flow_response_string_length}
    
  - measure: avg_number_of_auto_chat_replies
    description: 'Average number of request auto chat questions customers reply to'
    type: avg
    filter:
      source: -collection
    sql: ${request_message_facts.number_of_auto_chat_reply_responses}

  - dimension: request_had_more_than_1_shop
    type: yesno
    sql: ${request_recommendation_facts.number_of_shops} > 1

  - measure: count_with_more_than_one_shop
    type: count
    filter:
      request_had_more_than_1_shop: yes
    drill_fields: detail*

  - measure: avg_percent_product_carousel_swiped
    description: 'Average percentage of carousel recommendations swiped through'
    type: avg
    sql: ${request_created_event_facts.percent_carousel_recos_swiped}
    value_format: '0.00\%'

#---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

# Request funnel dimensions #

  - dimension: passes_first_triage_screen
    description: 'Request next action IS NOT None, (blank), NULL, Ditched'
    type: yesno
    sql: ${request_status_change_from_triage.first_nontriage_next_action} NOT IN ('None', 'Ditched') AND ${request_status_change_from_triage.first_nontriage_next_action} IS NOT NULL

  - dimension: has_customer_reply_before_recommendation
    description: 'Customer sends a non-auto chat reply message before having received recommendation'
    type: yesno
    sql: DATEDIFF(seconds, ${created_time}::timestamp, ${request_message_facts.first_customer_reply_time}::timestamp) > 0

  - dimension: has_recommendations
    description: 'Filter for requests we have actively shopped for, excludes collections where the customer simply hit Buy'
    type: yesno
    sql: (${source} <> 'collection' AND ${recommendations.recommendation_id} IS NOT NULL) OR (${source} = 'collection' AND (${request_message_facts.number_of_customer_messages} > 0 OR ${orders.id} IS NOT NULL)) OR ${orders.id} IS NOT NULL

  - dimension: has_customer_view_after_recos_sent
    description: 'Customer engages with request - i.e. any events on request URL - after first recommendation'
    type: yesno
    sql: DATEDIFF(seconds, ${request_recommendation_facts.first_recommendation_time}::timestamp, ${request_created_event_facts.last_request_detail_event_time}::timestamp) > 0

  - dimension: has_customer_view_after_second_set_of_recos_sent
    description: 'Customer engages with request - i.e. any events on request URL - after second shop'
    type: yesno
    sql: DATEDIFF(seconds, ${request_message_facts.second_shop_time}::timestamp, ${request_created_event_facts.last_request_detail_event_time}::timestamp) > 0

  - dimension: has_customer_reply_after_recommendation
    description: 'Customer sends a message after having received recommendation'
    type: yesno
    sql: DATEDIFF(seconds, ${request_recommendation_facts.first_recommendation_time}::timestamp, ${request_message_facts.last_customer_reply_time}::timestamp) > 0

  - dimension: has_shopper_visible_feedback_or_reply
    description: 'Customer has sent feedback or replied after viewing recommendation'
    type: yesno
    sql: DATEDIFF(seconds, ${request_recommendation_facts.first_recommendation_time}::timestamp, ${request_message_facts.last_customer_reply_time}::timestamp) > 0 or ${request_feedback_facts.number_of_feedback_submitted} > 0

  - dimension: has_see_more_clicks
    type: yesno
    sql: ${request_created_event_facts.count_user_click_see_more_recos_events} > 0

  - dimension: has_got_it_clicks
    type: yesno
    sql: ${request_created_event_facts.count_user_click_got_it_events} > 0

  - dimension: has_see_more_recos
    type: yesno
    sql: ${request_recommendation_facts.number_of_see_more_shops} > 0

  - dimension: has_product_carousel_swipes
    description: 'Customer has swiped product carousel and seen at least one more product than what is displayed by default'
    type: yesno
    sql: ${request_created_event_facts.count_carousel_swipes} > 0

  - dimension: has_recommendation_clicks
    type: yesno
    sql: ${request_created_event_facts.count_recommendation_clicks} > 0

  - dimension: has_recommendation_photo_views
    type: yesno
    sql: ${request_created_event_facts.count_view_more_photos_clicks} > 0

  - dimension: has_merchant_link_clicks
    type: yesno
    sql: ${request_created_event_facts.count_merchant_link_clicks} > 0

  - dimension: has_feedback_score_input_clicks
    type: yesno
    sql: ${request_feedback_facts.number_of_feedback_score_input} > 0

  - dimension: has_feedback_step_2
    type: yesno
    sql: ${request_created_event_facts.count_user_input_feedback_step2_events} > 0

  - dimension: has_submitted_feedback
    type: yesno
    sql: ${request_feedback_facts.number_of_feedback_submitted} > 0

  - dimension: has_recommendation_feedback_message
    type: yesno
    sql: ${request_message_facts.count_recommendation_feedback_messages} > 0

  - dimension: has_recommendation_buy_clicks
    type: yesno
    sql: ${request_created_event_facts.user_click_buy_on_reco_product_detail_page_events} > 0

  - dimension: has_recommendation_order_cta_clicks
    type: yesno
    sql: ${request_created_event_facts.user_submit_order_on_checkout_review_tab_events} > 0

  - dimension: has_converted
    description: 'Yes if there is at least one valid order on a given request.'
    type: yesno
    sql: ${request_order_facts.id} IS NOT NULL
    
#---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

# Request funnel - aggregate counts #

  - measure: count_that_pass_first_triage_screen
    description: 'Shop Ops triaged and next action WAS NOT None (blank), NULL, Ditched'
    type: count
    filter:
      passes_first_triage_screen: yes
    drill_fields: detail*

  - measure: count_with_customer_messages_before_recommendation
    description: 'Customer has sent a message beyond automated request questions, but before recommendation'
    type: count
    filter:
      has_customer_reply_before_recommendation: yes
    drill_fields: detail*
  
  - measure: count_with_recommendations
    description: 'Count of requests with at least one recommendation, excluding collection requests where a customer did not engage or buy'
    type: count
    filter:
      has_recommendations: yes
    drill_fields: detail*

  - measure: count_with_recommendations_from_catalog
    description: 'Count of requests with at least one product recommended from catalog'
    type: count
    filter:
      request_recommendation_facts.shopped_from_catalog: yes
    drill_fields: detail*

  - measure: count_with_no_recommendations_from_catalog
    description: 'Count of requests with at least one product recommended from catalog'
    type: number
    sql: ${count_with_recommendations} - ${count_with_recommendations_from_catalog}
    drill_fields: detail*

  - measure: count_without_recommendations
    description: 'Count of requests without recommendations'
    type: count
    filter:
      has_recommendations: no
    drill_fields: detail*

  - measure: count_where_request_seen_after_recommendations_sent
    description: 'Count of requests where customer visited request URL after we sent recommendations'
    type: count
    filter:
      has_customer_view_after_recos_sent: yes
    drill_fields: detail*

  - measure: count_where_request_seen_after_second_shop
    description: 'Count of requests where customer visited request URL after we sent 2nd set of recommendations'
    type: count
    filter:
      request_had_more_than_1_shop: yes
      has_customer_view_after_second_set_of_recos_sent: yes
    drill_fields: detail*

  - measure: count_with_customer_messages_after_recommendation
    description: 'Count of requests where customer has sent a message after recommendations sent'
    type: count
    filter:
      has_customer_reply_after_recommendation: yes
    drill_fields: detail*
  
  - measure: count_where_user_clicks_to_see_more_recos
    description: 'Count of clicks on the see more call-to-action. As of 5/9/16 not recording properly'
    type: count
    filter:
      has_see_more_clicks: yes
    drill_fields: detail*

  - measure: count_where_user_clicks_got_it
    description: 'Count of clicks on the got it call-to-action. Not sure recording properly'
    type: count
    filter:
      has_got_it_clicks: yes
    drill_fields: detail*

  - measure: count_where_see_more_recos_seen
    description: 'Count of see more shops a customer requests. Working.'
    type: count
    filter:
      has_see_more_recos: yes
    drill_fields: detail*

  - measure: count_where_product_carousel_swiped
    description: 'Count of requests where customer has swiped product carousel'
    type: count
    filter:
      has_product_carousel_swipes: yes
    drill_fields: detail*

  - measure: count_where_recommendations_clicked
    description: 'Count of requests where customer has clicked on at least one recommendation'
    type: count
    filter:
      has_recommendation_clicks: yes
    drill_fields: detail*

  - measure: count_where_reco_photos_viewed
    description: 'Count of requests where customer has clicked to view more photos at least once'
    type: count
    filter:
      has_recommendation_photo_views: yes
    drill_fields: detail*

  - measure: count_where_merchant_links_clicked
    description: 'Count of requests where customer has clicked on at least one merchant link'
    type: count
    filter:
      has_merchant_link_clicks: yes
    drill_fields: detail*

  - measure: count_where_feedback_score_input_clicked
    description: 'Count of requests where customer has clicked feedback score at least once'
    type: count
    filter:
      has_feedback_score_input_clicks: yes
    drill_fields: detail*

  - measure: count_where_feedback_step_2_completed
    description: 'Count of requests where customer has completed 2nd step of feedback mechanism at least once'
    type: count
    filter:
      has_feedback_step_2: yes
    drill_fields: detail*

  - measure: count_where_feedback_submitted
    description: 'Count of requests where customer has clicked feedback, entered text and submitted'
    type: count
    filter:
      has_submitted_feedback: yes
    drill_fields: detail*

  - measure: count_with_feedback_message
    description: 'Count of requests where a customer has either submitted feedback via feedback mechanism after 1/22/16 or via response to a specific reco chat item before that date'
    type: count
    filter:
      has_recommendation_feedback_message: yes
    drill_fields: detail*

  - measure: count_where_buy_clicked
    description: 'Count of requests where customer has clicked a Buy button or buy in feedback widget at least once on a recommendation related to this request'
    type: count
    filter:
      has_recommendation_buy_clicks: yes
    drill_fields: detail*

  - measure: count_where_order_cta_clicked
    description: 'Count of requests where customer has clicked a Purchase or Submit Order button at least once on a recommendation related to this request'
    type: count
    filter:
      has_recommendation_order_cta_clicks: yes
    drill_fields: detail*

  - measure: count_conversions
    description: 'Count of requests with at least 1 order'
    type: count
    filter:
      has_converted: yes
    drill_fields: detail*

  - measure: revenue_per_request
    description: 'Total gross revenue divided by total requests'
    type: number
    value_format: '$0.00'
    sql: ${orders.total_gross_revenue}/NULLIF(${count},0)
    
  - measure: count_with_archived_recommendations
    type: count
    filter:
      has_archived_recommendations: yes
    drill_fields: detail*    


#---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

## Request funnel - percentages ##

  - measure: percent_with_recommendations
    description: 'AKA "shops" this is the count of requests with at least one recommendation, excluding collection requests where a customer did not engage or buy'
    type: number
    sql: 100.0 * ${count_with_recommendations} / NULLIF(${count}, 0)
    value_format: '0.0\%'

  - measure: percent_with_customer_message_after_recommendation
    description: 'Customer has sent a message after receiving recommendations'
    type: number
    sql: 100.0 * ${count_with_customer_messages_after_recommendation} / NULLIF(${count}, 0)
    value_format: '0.0\%'

  - measure: conversion_rate
    description: 'Count of requests converted divided by count of requests converted'
    type: number
    sql: 100.0 * ${count_conversions} / NULLIF(${count}, 0)
    value_format: '0.0\%'

  - measure: conversion_rate_of_requests_with_recos
    description: 'Count of requests with at least one conversion divided by count of requests with at least one recommendation, excluding collection requests where a customer did not engage or buy'
    type: number
    sql: 100.0 * ${count_conversions} / NULLIF(${count_with_recommendations}, 0)
    value_format: '0.0\%'

#---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

# Time-based dimensions related to Shop Ops KPIs #

  - dimension: triage_windows
    sql_case:
      weekdays_9_to_9: ${request_message_facts.request_triage_clock_start_day_of_week} IN ('Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday') AND (${request_message_facts.request_triage_clock_start_hour_of_day} >= 9 AND ${created_hour_of_day} < 21)
      weeknights: ${request_message_facts.request_triage_clock_start_day_of_week} IN ('Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday') AND (${request_message_facts.request_triage_clock_start_hour_of_day} >= 21 OR ${created_hour_of_day} < 9)
      weekends: ${request_message_facts.request_triage_clock_start_day_of_week} IN ('Saturday', 'Sunday')
      else: 'other'

  - dimension: minutes_to_first_shopper_reply
    description: 'Minutes between request and first shopper reply'
    type: number
    sql: ROUND(DATEDIFF(seconds, ${request_message_facts.request_triage_clock_start_time}::timestamp, ${request_message_facts.first_shopper_reply_time}::timestamp) / 60)
    value_format: '0.0'
    
  - dimension: minutes_to_first_shopper_reply_tier
    description: 'Minutes between request and first shopper reply'
    type: tier
    tiers: [0,10,30,60,360,600,1440,2880]
    style: integer
    sql: ${minutes_to_first_shopper_reply}
    value_format: '0.0'
    
  - dimension: minutes_to_first_customer_reply_tier
    description: 'Minutes between first shopper reply and customer reply'
    type: tier
    tiers: [0,10,30,60,360,600,1440,2880]
    style: integer
    sql: ${minutes_to_first_customer_reply}
    
  - dimension: hours_to_first_shopper_reply
    description: 'Hours between request and first shopper reply'
    type: number
    sql: ROUND(DATEDIFF(minutes, ${request_message_facts.request_triage_clock_start_time}::timestamp, ${request_message_facts.first_shopper_reply_time}::timestamp)/60) + 1
    
  - dimension: hours_to_first_shopper_reply_tier
    description: 'Hours between first shopper reply and customer reply'
    type: tier
    tiers: [0,1,2,3,4,5,6,10,12,24]
    style: integer
    sql: ${hours_to_first_shopper_reply}
    
  - dimension: minutes_to_first_customer_reply
    description: 'Minutes between first shopper reply and customer reply'
    type: number
    sql: ROUND(DATEDIFF(seconds, ${request_message_facts.first_shopper_reply_time}::timestamp, ${request_message_facts.first_customer_reply_time}::timestamp) / 60)
    value_format: '0.0'

    ## Time to recommendation ##

  - dimension: minutes_to_first_recommendation
    description: 'Minutes between request created and first recommendation'
    type: number
    sql: ROUND(DATEDIFF(seconds, ${created_time}::timestamp, ${request_recommendation_facts.first_recommendation_time}::timestamp) / 60)
    value_format: '0.0'

  - dimension: minutes_to_first_recommendation_tier
    description: 'Time between request created and first recommendation'
    type: tier
    tiers: [0,40,60,120,240,480]
    style: integer
    sql: ${minutes_to_first_recommendation}
    
  - dimension: hours_to_first_recommendation
    description: 'Hours between request created and first recommendation'
    type: number
    sql: ROUND(DATEDIFF(minutes, ${created_time}::timestamp, ${request_recommendation_facts.first_recommendation_time}::timestamp) / 60) + 1
    value_format: '0.0'

  - dimension: hours_to_first_recommendation_tier
    description: 'Time between request created and first recommendation'
    type: tier
    tiers: [0,40,60,120,240,480]
    style: integer
    sql: ${hours_to_first_recommendation}
    
  - dimension: days_to_first_recommendation
    description: 'Days between request created and first recommendation'
    type: number
    sql: ROUND(DATEDIFF(hours, ${created_time}::timestamp, ${request_recommendation_facts.first_recommendation_time}::timestamp) / 24)
    value_format: '0.0'

  - dimension: days_to_first_recommendation_tier
    description: 'Time between request created and first recommendation'
    type: tier
    tiers: [0,40,60,120,240,480]
    style: integer
    sql: ${days_to_first_recommendation}

  - dimension: recommendation_within_1_hour
    type: 'Were we able to get a recommendation out within 40 minutes from request created?'
    type: yesno
    sql: ${minutes_to_first_recommendation} <= 60

  - dimension: seconds_to_next_action_changed_from_triage
    hidden: true
    description: 'Seconds between request creation and ShopOps triage as measured by change in Next Action from TRIAGE. Next Action implemented 10/20/15.'
    type: number
    sql: DATEDIFF(seconds, ${request_message_facts.request_triage_clock_start_time}::timestamp, ${request_status_change_from_triage.first_nontriage_time}::timestamp)
    
  - dimension: minutes_to_next_action_changed_from_triage
    description: 'Minutes between request creation and ShopOps triage as measured by change in Next Action from TRIAGE. Next Action implemented 10/20/15.'
    type: number
    sql: ROUND(DATEDIFF(seconds, ${request_message_facts.request_triage_clock_start_time}::timestamp, ${request_status_change_from_triage.first_nontriage_time}::timestamp)/60)

  - dimension: minutes_to_next_action_changed_from_triage_tier
    description: 'Minutes between request creation and ShopOps triage as measured by change in Next Action from TRIAGE. Next Action implemented 10/20/15.'
    type: tier
    style: integer
    tiers: [5,10,15,30,45,60,120]
    sql: ${minutes_to_next_action_changed_from_triage}

  - dimension: five_minute_triage
    description: 'Did ShopOps triage occur within 5 minutes (as measured by change in Next Action from TRIAGE). Next Action implemented 10/20/15.'
    type: yesno
    sql: ${seconds_to_next_action_changed_from_triage} <= 300

  - dimension: minutes_to_archive
    description: 'Minutes between request creation and ShopOps archiving request'
    type: number
    sql: ROUND(DATEDIFF(seconds, ${request_message_facts.request_triage_clock_start_time}::timestamp, ${request_status_change_from_triage.archived_time}::timestamp)/60)

#---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

## Time-based ShopOps KPIs ##

  - measure: average_minutes_to_first_shopper_reply
    description: 'Minutes between request and first shopper reply'
    type: avg
    sql: ${minutes_to_first_shopper_reply}
    
  - measure: average_minutes_to_first_customer_reply
    description: 'Minutes between first shopper reply and customer reply'
    type: avg
    sql: ${minutes_to_first_customer_reply}
    
  - measure: count_triaged_under_5_minutes
    type: count_distinct
    filter:
      five_minute_triage: yes
    sql: ${id}

  - measure: percent_triaged_under_5_minutes
    type: number
    sql: 100.0 * ${count_triaged_under_5_minutes} / NULLIF(${count}, 0)
    value_format: '0.0\%'

  - measure: average_minutes_to_next_action_changed_from_triage
    type: avg
    filter:
    sql: ${seconds_to_next_action_changed_from_triage} / 60

  - measure: count_recommended_under_1_hour
    type: count_distinct
    filter:
      recommendation_within_1_hour: yes
    sql: ${id}

  - measure: percent_recommended_under_1_hour
    type: number
    sql: 100.0 * ${count_recommended_under_1_hour} / NULLIF(${count}, 0)
    value_format: '0.0\%'
    
  - measure: average_minutes_to_first_recommendation
    type: avg
    filter:
      has_recommendations: yes
    sql: ${minutes_to_first_recommendation}

  - measure: average_hours_to_first_recommendation
    type: avg
    filter:
      has_recommendations: yes
    sql: ${hours_to_first_recommendation}

  - measure: average_days_to_first_recommendation
    type: avg
    filter:
      has_recommendations: yes
    sql: ${days_to_first_recommendation}

  - measure: shopper_messages_per_request
    type: number
    sql: 1.0 * ${messages.count_shopper_messages} / NULLIF(${count}, 0)
    value_format: '0.0'

  - measure: shopper_messages_per_shopped_request
    type: number
    sql: 1.0 * ${messages.count_shopper_messages} / NULLIF(${count_with_recommendations}, 0)
    value_format: '0.0'

  - measure: recommendation_messages_per_request
    type: number
    sql: 1.0 * ${messages.count_recommendation_messages} / NULLIF(${count}, 0)
    value_format: '0.0'

  - measure: recommendation_messages_per_shopped_request
    type: number
    sql: 1.0 * ${messages.count_recommendation_messages} / NULLIF(${count_with_recommendations}, 0)
    value_format: '0.0'


#---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
    
  sets:
    detail:
      - created_time
      - id
      - customers.full_name
      - current_title
      - has_recommendations
      - has_auto_generated_recommendations
      - experiment_name
      - experiment_release
      - experiment_result
      - request_message_facts.occasion
      - request_message_facts.for_whom
      - request_message_facts.age
      - request_message_facts.budget
      - request_message_facts.additional_details
      - has_converted
      - request_order_facts.first_order_created_time
      - customer_request_facts.lifetime_requests
      - customer_request_facts.lifetime_conversions
      - message_stream
      - customers.request_history
      - source
      - request_link
      - user_id
    conversion_detail:
      - customers.full_name
      - customers.user_id
      - current_title
      - category_grouped
      - created_time
      - request_message_facts.first_recommendation_time
      - request_order_facts.first_order_created_time
      - request_message_facts.customer_request_flow_response_string_length
      - customer_request_facts.lifetime_orders
      - customer_session_facts.first_session_utm_medium
      - customer_session_facts.first_session_utm_source
      - customer_session_facts.first_session_utm_campaign
      - customer_session_facts.lifetime_session_history
      - customer_session_facts.lifetime_event_history
      - id
    customer_detail:
      - customers.full_name
      - customers.email
      - customers.customer_score
      - customer_request_facts.lifetime_gross_revenue
      - customer_request_facts.trailing_90_day_purchase_bucket
      - customer_request_facts.last_request_created_date
      - customer_request_facts.lifetime_requests
      - customer_request_facts.last_order_created_date
      - customer_request_facts.lifetime_orders
      - customer_session_facts.number_of_sessions_tiered
      - customer_session_facts.last_session_start
      - customer_session_facts.has_used_mobile_app
      - customers.account_sign_up_date
      - customer_session_facts.request_created_in_first_auth_session
      - customer_session_facts.first_session_with_request
      - customer_session_facts.first_session_utm_medium
      - customer_session_facts.first_session_utm_source
      - customer_session_facts.first_session_utm_campaign
      - customers.notes
      - customers.user_id
      - customer_session_facts.lifetime_session_history
      - customer_session_facts.lifetime_event_history
    message_stream:
      - messages.created_time
      - messages.type
      - title
      - messages.message_index
      - messages.sender_type
      - messages.message_type
      - messages.message
      - recommendations.product_brand
      - recommendations.product_name
      - recommendations.product_price
      - messages.message_text
      - request_link
    request_history:
      - request_index
      - created_time
      - current_title
      - category_grouped
      - request_message_facts.number_of_shopper_messages
      - request_message_facts.number_of_customer_non_auto_chat_reply_messages
      - has_recommendations
      - has_converted
      - orders.total_price
      - request_link
      - id
    recommendation_detail:
      - recommendation_id
      - requests.request_link
      - requests.title
      - created_time
      - products.name
      - products.created_time
      - product_recommended_from_catalog
      - product_recommended_from_internet
